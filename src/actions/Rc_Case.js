import { useRef, useMemo, useState, useEffect, useCallback } from 'react';

import axiosInstance, { endpoints } from 'src/utils/axios';

export function useGetReceivecase() {
  const url = endpoints.dashboard.receivecaseJoin;

  const [Rec, setRec] = useState([]); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
  const [isLoading, setIsLoading] = useState(false); // ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [error, setError] = useState(null); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
  const hasFetched = useRef(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß

  const fetchReceivecase = useCallback(async () => {
    if (hasFetched.current) return;
    hasFetched.current = true;

    setError(null);
    setIsLoading(true);

    let attempts = 0; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏á API
    const maxRetries = 2; // ‡∏¢‡∏¥‡∏á‡∏ã‡πâ‡∏≥‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡∏£‡∏≠‡∏ö

    while (attempts <= maxRetries) {
      try {
        console.log(`üìå Attempt ${attempts + 1}: Fetching data from`, url);
        // eslint-disable-next-line no-await-in-loop
        const response = await axiosInstance.get(url);

        if (response.status === 200) {
          if (response.headers['content-type'].includes('application/json')) {
            console.log('üìå API Data:', response.data);
            setRec(response.data); 
            setIsLoading(false);
            return;
          }
          throw new Error('Received non-JSON data');
        } else {
          throw new Error(`Error: ${response.status} - ${response.statusText}`);
        }
      } catch (err) {
        console.error(`‚ùå Attempt ${attempts + 1} Failed:`, err.message);
        // eslint-disable-next-line no-plusplus
        attempts++;

        if (attempts > maxRetries) {
          setError(err.message || 'An error occurred');
          setIsLoading(false);
        } else {
          console.log('üîÑ Retrying...');
        }
      }
    }
  }, [url]);

  useEffect(() => {
    fetchReceivecase(); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  }, [fetchReceivecase]);

  const memoizedValue = useMemo(
    () => ({
      Receivecase: Rec,
      ReceivecaseLoading: isLoading,
      ReceivecaseError: error,
      refetchReceivecase: fetchReceivecase,
    }),
    [Rec, isLoading, error, fetchReceivecase]
  );

  return memoizedValue;
}
